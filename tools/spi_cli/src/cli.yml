#
# Copyright (C) 2017-2018 Alexis Bauvin, Vincent Charbonniéras, Clément Decoodt,
# Alexandre Janniaux, Adrien Marcenat
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
name: SPI ROSE Command Line Tool
version: "0.1.0"
about: "Yet Another CLI for SPI matching the SpiROSE SPI behaviour"
args:
   - device:
      help: "SPI device to use. To test, use none as device. If no subcommand is given, it will only check that the device can be opened and configured."
      short: d
      long: device
      takes_value: true
      default_value: "/dev/spidev0.0"
   - verbose:
      help: "Trace data sent and received"
      short: v
      long: verbose
   - frequency:
      help: "SPI speed in bit/s"
      short: f
      long: frequency
      takes_value: true
      default_value: "14M"
   - system-clock:
      help: "FPGA system clock frequency"
      short: c
      long: system-clock
      takes_value: true
      default_value: "59M"
subcommands:
   - enable_rgb:
      about: "Start display"
   - disable_rgb:
      about: "Stop display"
   - get_rotation:
      about: "Read rotation slice index"
   - get_speed:
      about: "Read rotation speed"
   - get_config:
      about: "Get configuration"
   - get_debug:
      about: "Get the 4 bytes FPGA debug module"
   - send_config:
      about: "Configure the LED drivers"
      args:
         - config_file:
            help: "LED Drivers configuration file, TOML format"
            required: true
   - enable_mux:
      about: "Enable one or several led multiplexers"
      args:
         - mux_id:
            value_name: mux_id
            multiple: true
            required: true
            possible_values: ["0", "1", "2", "3", "4", "5", "6", "7"]
   - disable_mux:
      about: "Disable one or several led multiplexers"
      args:
         - mux_id:
            value_name: mux_id
            multiple: true
            required: true
            possible_values: ["0", "1", "2", "3", "4", "5", "6", "7"]
   - send_driver_rgb:
      about: "Send raw RGB data to drivers"
      args:
         - filename:
            help: "The filename to read and send"
            required: true
   - send_driver_pokered:
      about: "Send pokered RGB data to drivers"
      args:
         - filename:
            help: "The filename to read and send"
            required: true
   - manage:
      about: "Tell the FPGA to send debugging signals from the SPI to the other module, for example to send data to a driver"
   - release:
      about: "Do the opposite of manage, tell the FPGA that it shouldn't use SPI's debugging signals as input for the other modules"
   - reset:
      about: "Reset the FPGA"
   - read_pixel:
      about: "Read a pixel"
      args:
        - x:
           help: "The column"
           required: true
        - y:
           help: "The line"
           required: true
   - write_pixel:
      about: "Write a pixel"
      args:
        - x:
           help: "The column"
           required: true
        - y:
           help: "The line"
           required: true
        - r:
           help: "Red component"
           required: true
        - g:
           help: "Green component"
           required: true
        - b:
           help: "Blue component"
           required: true
   - color:
      about: "Set a uniform color on all pixels"
      args:
        - r:
           help: "Red component"
           required: true
        - g:
           help: "Green component"
           required: true
        - b:
           help: "Blue component"
           required: true
   - send_image:
      about: "Send a 40x48 image to the display"
      args:
         - filename:
            help: "The image to read and send"
            required: true
   - get_image:
      about: "Receive a 40x48 image from the display"
      args:
         - filename:
            help: "The PNG file to write"
            required: true
   - read_framebuffer_column:
      about: "Read the output of framebuffer for the given column"
      args:
         - column:
            help: "The column to profile"
            required: true
