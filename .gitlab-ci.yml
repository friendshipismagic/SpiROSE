image: tuetuopay/verilator

stages:
  - lint
  - build
  - test
  - bundle

variables:
  JOBS: 2
  RENDERER_POC_DIR: "tools/renderer"
  FPGA_DIR: "FPGA"
  LIBSPIROSE_DIR: "SBC/libSpiROSE"

before_script:
  - git submodule init
  - git submodule update

lower_tower/lint:
  stage: lint
  script:
    - cd LCD_Display
    - make lint

lower_tower/build:
  image: tuetuopay/arm-none-eabi
  stage: build
  script:
    - cd LCD_Display
    - make

lower_tower/test:
  image: tuetuopay/arm-none-eabi
  stage: test
  script:
    - cd LCD_Display
    - make test

renderer-poc/lint:
  stage: lint
  image: tuetuopay/clang
  script:
    - cd $RENDERER_POC_DIR
    - make lint

renderer-poc/build:
  stage: build
  image: tuetuopay/glfw
  script:
    - cd $RENDERER_POC_DIR
    - make build
    - make test

renderer-poc/bundle:
  stage: bundle
  image: tuetuopay/glfw
  script:
    - cd $RENDERER_POC_DIR
    - make bundle
  artifacts:
    paths:
      - $RENDERER_POC_DIR/renderer-poc.tar.gz
    expire_in: 1 week
  only:
    - master

fpga/lint:
  stage: lint
  image: tuetuopay/verilator
  script:
    - cd $FPGA_DIR
    - make lint

fpga/build:
  stage: build
  image: tuetuopay/verilator
  script:
    - cd $FPGA_DIR
    - make build
    - make test

libspirose/lint:
  stage: lint
  image: tuetuopay/clang
  script:
    - cd $LIBSPIROSE_DIR
    - make lint

libspirose/build:
  stage: build
  image: tuetuopay/glfw
  script:
    - cd $LIBSPIROSE_DIR
    - make build -j$(JOBS)

libspirose/test:
  stage: test
  image: tuetuopay/glfw
  script:
    - cd $LIBSPIROSE_DIR
    - echo Testing desktop OpenGL
    - make build -j$(JOBS)
    - make install
    - make test -j$(JOBS)
    - echo Testing OpenGL ES
    - make clean
    - make build UNAME_P=armv7l -j$(JOBS)
    - make install
    - make test -j$(JOBS)

libspirose/bundle:
  stage: bundle
  image: tuetuopay/glfw
  script:
    - cd $LIBSPIROSE_DIR
    - make bundle -j$(BUNDLE)
  artifacts:
    paths:
      - $LIBSPIROSE_DIR/libSpiROSE.tar.gz
    expire_in: 1 week
  only:
    - master

spi-cli/build:
  stage: build
  image: rust
  script:
    - export CARGO_HOME="$PWD/.cargo"
    - cd tools/spi_cli && cargo build
  cache:
    key: cargo
    paths:
      - .cargo/

spi-cli/test:
  stage: test
  image: rust
  script:
    - export CARGO_HOME="$PWD/.cargo"
    - cd tools/spi_cli && cargo test
  cache:
    key: cargo
    paths:
      - .cargo/
